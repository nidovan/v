
Initialize both tables with the DataTables plugin using the appropriate options. Make sure to set the responsive option to true for both tables so that they can adjust to the screen size.
javascript
Copy code


// Initialize the master table
$('#master-table').DataTable({
  responsive: true,
  // ... other options
});

// Initialize the detail table
$('#detail-table').DataTable({
  responsive: true,
  // ... other options
});


Next, you need to set up a click event handler for the rows in the master table. When a row is clicked, you'll need to retrieve the data for that row and populate the detail table with it.
javascript
Copy code
$('#master-table tbody').on('click', 'tr', function() {
  // Get the data for the selected row
  var data = $('#master-table').DataTable().row(this).data();
  
  // Populate the detail table with the selected row's data
  $('#detail-table').DataTable().clear().draw();
  $('#detail-table').DataTable().rows.add(data.details).draw();
  
  // Show the Bootstrap modal
  $('#detail-modal').modal('show');
});



Finally, you need to create the Bootstrap modal HTML markup and initialize it with the modal plugin. Make sure to set the id attribute of the modal to detail-modal so that you can reference it in the click event handler.
html
Copy code


<!-- Detail Modal -->
<div class="modal fade" id="detail-modal" tabindex="-1" role="dialog" aria-labelledby="detail-modal-label" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="detail-modal-label">Details</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <!-- Detail table -->
        <table id="detail-table" class="table table-striped table-bordered" style="width:100%">
          <thead>
            <tr>
              <th>Name</th>
              <th>Value</th>
            </tr>
          </thead>
          <tbody>
          </tbody>
        </table>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>













public ActionResult GetCountries()
{
    using (var db = new CountriesDbContext())
    {
        var countries = db.Countries.ToList();
        var countryList = countries.Select(c => new SelectListItem
        {
            Value = c.CountryId.ToString(),
            Text = c.CountryName
        });
        return Json(countryList, JsonRequestBehavior.AllowGet);
    }
}
In your view, create a dropdown list using the Html.DropDownListFor() helper method and bind it to the list of SelectListItem objects returned by the action method. For example, you can create a dropdown list of countries using the following code:
less
Copy code
@Html.DropDownListFor(m => m.CountryId, new SelectList(""),
    "-- Select Country --", new { @class = "form-control" })
Finally, use jQuery to call the GetCountries() action method and populate the dropdown list with the data returned by the server. For example, you can use the following jQuery code to populate the dropdown list with the list of countries:
javascript
Copy code
$(document).ready(function() {
    $.ajax({
        type: "GET",
        url: "@Url.Action("GetCountries", "Home")",
        dataType: "json",
        success: function(data) {
            $.each(data, function(index, item) {
                $("#CountryId").append(
                    $("<option>").text(item.Text).val(item.Value)
                );
            });
        }
    });
});











Here's an example of how to implement server-side filtering with dropdowns in DataTables using ASP.NET MVC:

Add the necessary JavaScript and CSS files for DataTables to your view:
html
Copy code
<head>
    <!-- DataTables CSS -->
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/dt-1.10.25/datatables.min.css"/>

    <!-- jQuery and DataTables JS -->
    <script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/v/dt/dt-1.10.25/datatables.min.js"></script>
</head>
Create a table element in your view with an empty tbody:
html
Copy code
<table id="myTable">
    <thead>
        <tr>
            <th>Column 1</th>
            <th>Column 2</th>
            <th>Column 3</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>
Initialize the DataTable with server-side processing enabled and set the server-side processing URL:
javascript
Copy code
$(document).ready(function() {
    $('#myTable').DataTable({
        "processing": true,
        "serverSide": true,
        "ajax": {
            "url": "@Url.Action("GetData", "Home")",
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Column1" },
            { "data": "Column2" },
            { "data": "Column3" }
        ]
    });
});
Create an action method in your controller that returns the data for the table. The method should accept the parameters needed for server-side processing, including the search value and any dropdown filter values.
csharp
Copy code
public JsonResult GetData(int draw, int start, int length, string searchValue, string dropdownFilterValue)
{
    // Query your data source with the search and filter values
    var data = db.MyTable
        .Where(m => m.Column1.Contains(searchValue))
        .Where(m => m.Column2 == dropdownFilterValue)
        .OrderBy(m => m.Column1)
        .Skip(start)
        .Take(length)
        .ToList();

    // Get the total count of records for the search
    var recordsTotal = db.MyTable.Count(m => m.Column1.Contains(searchValue));

    // Get the count of records for the current filter and search
    var recordsFiltered = db.MyTable
        .Where(m => m.Column1.Contains(searchValue))
        .Where(m => m.Column2 == dropdownFilterValue)
        .Count();

    // Return the data in the required format for DataTables
    return Json(new { draw = draw, recordsFiltered = recordsFiltered, recordsTotal = recordsTotal, data = data });
}


Add a dropdown filter to your view and handle the change event to redraw the DataTable with the new filter value:


html
Copy code
<select id="myFilter">
    <option value="">All</option>
    <option value="Value1">Value 1</option>
    <option value="Value2">Value 2</option>
    <option value="Value3">Value 3</option>
</select>
javascript
Copy code
$(document).ready(function() {
    var table = $('#myTable').DataTable({
        // DataTable initialization code
    });

    $('#myFilter').on('change', function() {
        table.column(1).search($(this).val()).draw();
   
